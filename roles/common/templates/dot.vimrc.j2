set tabstop=2
set softtabstop=2
set expandtab
set shiftwidth=2
set smarttab
set autoindent 
set smartindent 
set nowrap
set number
set splitbelow splitright
set nobackup
set nowritebackup
set backupcopy=yes
 
syntax on
filetype on
filetype plugin on
filetype indent on
 
call plug#begin('~/.local/share/nvim/plugged')
 
" Plug 'lunarxlark/aws-cfn-snippet.vim'
" Plug 'KamunagiChiduru/vim-jsonrpc'
" Plug 'Shougo/neosnippet.vim'
" Plug 'Shougo/neosnippet-snippets'
" Plug 'prabirshrestha/asyncomplete-neosnippet.vim'
" Plug 'ervandew/supertab'
Plug 'SirVer/Ultisnips'
Plug 'natebosch/dartlang-snippets'
Plug 'thaerkh/vim-workspace'
Plug 'tpope/vim-fugitive'
Plug 'rafi/awesome-vim-colorschemes'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'tomtom/tcomment_vim'
Plug 'dart-lang/dart-vim-plugin'
Plug 'prabirshrestha/async.vim'
Plug 'prabirshrestha/vim-lsp'
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/asyncomplete-lsp.vim'
Plug 'prabirshrestha/asyncomplete-ultisnips.vim'
 
call plug#end()
" Plug 'reisub0/hot-reload.vim'
colorscheme deus
 
let mapleader="\<SPACE>"
 
nnoremap <C-p> :FZF!<cr>
tnoremap <Esc> <C-\><C-n>
 
if executable('dart_language_server')
  au User lsp_setup call lsp#register_server({
        \ 'name':'dart_language_server',
        \ 'cmd':{server_info->['dart_language_server']},
        \ 'whitelist': ['dart'],
        \ })
endif

if has('python3')
    call asyncomplete#register_source(asyncomplete#sources#ultisnips#get_source_options({
        \ 'name': 'ultisnips',
        \ 'whitelist': ['*'],
        \ 'completor': function('asyncomplete#sources#ultisnips#completor'),
        \ }))
endif 
 
let dart_format_on_save = 1
let g:lsp_signs_enabled = 1
let g:lsp_diagnostics_echo_cursor = 1
let g:lsp_signs_error = {'text': 'X'}
let g:lsp_signs_warning = {'text': '-'}
let g:lsp_signs_hint = {'text':'?'}
 
nmap <silent> <leader>lj :LspNextError<cr>
nmap <silent> <leader>lk :LspPreviousError<cr>
nmap <silent> <leader>ld :LspDefinition<cr>
nmap <silent> <leader>lh :LspHover<cr>
 
nmap <silent> <leader>cp :pclose<cr>
nmap <silent> <leader>cc :cclose<cr>
 
:command! Rm call delete(expand('%')) | bdelete!
 
let g:workspace_persist_undo_history = 0
set undofile undodir="~/.local/share/nvim/undo"

set completeopt+=preview
let g:asyncomplete_auto_popup = 0

imap <c-space> <Plug>(asyncomplete_force_refresh)

inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<cr>"

let g:UltiSnipsExpandTrigger="<Tab>"
let g:UltiSnipsJumpForwardTrigger = "<Tab>"
let g:UltiSnipsJumpBackwardTrigger = "<S-Tab>"
augroup WincentAutocomplete
  autocmd!
  autocmd! User UltiSnipsEnterFirstSnippet
  autocmd! User UltiSnipsExitLastSnippet
  autocmd User UltiSnipsEnterFirstSnippet call Setup_mappings()
  autocmd User UltiSnipsExitLastSnippet call Teardown_mappings()
augroup END

let b:did_after_plugin_ultisnips_after=1

execute 'inoremap <silent> ' . g:UltiSnipsExpandTrigger .
      \ ' <C-R>=Expand_or_jump("N")<CR>'
execute 'snoremap <silent> ' . g:UltiSnipsExpandTrigger .
      \ ' <Esc>:call Expand_or_jump("N")<CR>'
execute 'inoremap <silent> ' . g:UltiSnipsJumpBackwardTrigger .
      \ ' <C-R>=Expand_or_jump("P")<CR>'
execute 'snoremap <silent> ' . g:UltiSnipsJumpBackwardTrigger .
      \ ' <Esc>:call Expand_or_jump("P")<CR>'

let s:expansion_active = 0

function! Setup_mappings() abort
  " Overwrite the mappings that UltiSnips sets up during expansion.
  execute 'inoremap <buffer> <silent> ' . g:UltiSnipsJumpForwardTrigger .
        \ ' <C-R>=Expand_or_jump("N")<CR>'
  execute 'snoremap <buffer> <silent> ' . g:UltiSnipsJumpForwardTrigger .
        \ ' <Esc>:call Expand_or_jump("N")<CR>'
  execute 'inoremap <buffer> <silent> ' . g:UltiSnipsJumpBackwardTrigger .
        \ ' <C-R>=Expand_or_jump("P")<CR>'
  execute 'snoremap <buffer> <silent> ' . g:UltiSnipsJumpBackwardTrigger .
        \ ' <Esc>:call Expand_or_jump("P")<CR>'

  " One additional mapping of our own: accept completion with <CR>.
  imap <expr> <buffer> <silent> <CR> pumvisible() ? "\<C-y>" : "\<CR>"
  smap <expr> <buffer> <silent> <CR> pumvisible() ? "\<C-y>" : "\<CR>"

  let s:expansion_active = 1
endfunction

function! Teardown_mappings() abort
  silent! iunmap <expr> <buffer> <CR>
  silent! sunmap <expr> <buffer> <CR>

  let s:expansion_active = 0
endfunction

let g:ulti_jump_backwards_res = 0
let g:ulti_jump_forwards_res = 0
let g:ulti_expand_res = 0

function! Expand_or_jump(direction) abort
  
  if !pumvisible()
    call UltiSnips#ExpandSnippet()
  endif
  if g:ulti_expand_res == 0
    " No expansion occurred.
    if pumvisible()
      " Pop-up is visible, let's select the next (or previous) completion.
      if a:direction ==# 'N'
        return "\<C-N>"
      else
        return "\<C-P>"
      endif
    else
      if s:expansion_active
        if a:direction ==# 'N'
          call UltiSnips#JumpForwards()
          if g:ulti_jump_forwards_res == 0
            " We did not jump forwards.
            return "\<Tab>"
          endif
        else
          call UltiSnips#JumpBackwards()
        endif
      else
        if a:direction ==# 'N'
          return "\<Tab>"
        endif
      endif
    endif
  endif

  " No popup is visible, a snippet was expanded, or we jumped, or we failed to
  " jump backwards, so nothing to do.
  return ''
endfunction

unmap <C-N>
unmap <C-P>
