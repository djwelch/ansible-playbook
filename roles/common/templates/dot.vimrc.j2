set tabstop=2
set softtabstop=2
set expandtab
set shiftwidth=2
set smarttab
set autoindent  
set smartindent  
set nowrap
set number
set undofile undodir="~/.local/share/nvim/undo"
set splitbelow splitright

syntax on
filetype on
filetype plugin on
filetype indent on

let mapleader="\<SPACE>"

call plug#begin('~/.local/share/nvim/plugged')

Plug 'rafi/awesome-vim-colorschemes'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'tomtom/tcomment_vim'
Plug 'jiangmiao/auto-pairs'

Plug 'mhartington/nvim-typescript', { 'for': 'typescript', 'do': './install.sh' }
Plug 'HerringtonDarkholme/yats.vim', { 'for': 'typescript' }

Plug 'zchee/deoplete-jedi', { 'for': ['python', 'python3'] }

Plug 'eraserhd/parinfer-rust', { 'for': 'clojure' }
Plug 'clojure-vim/async-clj-omni', { 'for': 'clojure' }

Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
Plug 'Shougo/neosnippet.vim'
Plug 'Shougo/neosnippet-snippets'

call plug#end()

colorscheme deus

let g:deoplete#keyword_patterns = {}
let g:deoplete#keyword_patterns.clojure = '[\w!$%&*+/:<=>?@\^_~\-\.#]*'
let g:deoplete#auto_complete_start_length = 1
let g:deoplete#enable_at_startup = 1
let g:deoplete#enable_smart_case = 1
" let g:deoplete#disable_auto_complete = 1
imap <expr><TAB> pumvisible() ? "\<C-n>" : (neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>")
imap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<S-TAB>"
imap <expr><CR> pumvisible() ? deoplete#mappings#close_popup() : "\<CR>\<Plug>AutoPairsReturn"

nnoremap <C-p> :FZF!<cr>
tnoremap <Esc> <C-\><C-n>

"function! FirstTermOfTabJobId()
"    let t_id = nvim_get_current_tabpage()
"    for w_id in nvim_tabpage_list_wins(t_id)
"        let b_id = nvim_win_get_buf(w_id)
"        if nvim_buf_get_option(b_id, 'buftype') == 'terminal'
"            return nvim_buf_get_var(b_id, 'terminal_job_id')
"        endif
"    endfor
"endfunction
"
"function! REPLSendSafe()
"    " Hack to get character under the cursor.
"    norm "ayl
"    if index(["(", ")", "[", "]", "{", "}"], @a) >= 0
"        " Hack to get text using % motion.
"        norm v%"ay
"        call REPLSend(@a)
"    endif
"endfunction
"
"function! REPLSend(cmd)
"    call jobsend(FirstTermOfTabJobId(), a:cmd."\n")
"endfunction
"
"nnoremap <leader>tc :vs term://clj -C:dev -R:clj --repl
"nnoremap <leader>ts :vs term://clj -C:dev -R:cljs --main cljs.main --watch src --compile sam.core --repl

" If no visual selection, send safely
"nnoremap <leader>ef :call REPLSendSafe()<cr>
" If there's a visual selection, just send it
"vnoremap <leader>ef "ay:call REPLSend(@a)<cr>
" Send the entire buffer
"nnoremap <leader>eb :call REPLSend("(load-file \"".expand('%:p')."\")")<cr>
" Get docs
"nnoremap <leader>doc :call REPLSend("(clojure.repl/doc ".expand("<cword>").")")<cr>

